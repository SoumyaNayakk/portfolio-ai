from dotenv import load_dotenv
import streamlit as st
from langchain.chains import RetrievalQA
from langchain.llms import OpenAI
from langchain.vectorstores import Qdrant
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.chat_models import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from htmlTemplates import css, bot_template, user_template
import qdrant_client
import os

def get_vector_store():
    client = qdrant_client.QdrantClient(
        os.getenv("QDRANT_HOST"),
        api_key=os.getenv("QDRANT_API_KEY")
    )
    
    embeddings = OpenAIEmbeddings()

    vector_store = Qdrant(
        client=client, 
        collection_name=os.getenv("QDRANT_COLLECTION_NAME"), 
        embeddings=embeddings,
    ), FAISS.from_texts(texts=text_chunks, embedding=embeddings)
    
    return vector_store

def get_conversation_chain(vectorstore):
    llm = ChatOpenAI()
    # llm = HuggingFaceHub(repo_id="google/flan-t5-xxl", model_kwargs={"temperature":0.5, "max_length":512})

    memory = ConversationBufferMemory(
        memory_key='chat_history', return_messages=True)
    conversation_chain = ConversationalRetrievalChain.from_llm(
        llm=llm,
        retriever=vectorstore.as_retriever(),
        memory=memory
    )
    return conversation_chain

def handle_userinput(user_question):
    response = st.session_state.conversation({'question': user_question})
    st.session_state.chat_history = response['chat_history']

    for i, message in enumerate(st.session_state.chat_history):
        if i % 2 == 0:
            st.write(user_template.replace(
                "{{MSG}}", message.content), unsafe_allow_html=True)
        else:
            st.write(bot_template.replace(
                "{{MSG}}", message.content), unsafe_allow_html=True)

def main():
    # load_dotenv()
    
    # st.set_page_config(page_title="Ask Qdrant")
    # st.header("Ask your remote database ðŸ’¬")
    
    # # create vector store
    # vector_store = get_vector_store()

    # # create conversation chain
    # st.session_state.conversation = get_conversation_chain(
    # vector_store)
    
    # # create chain 
    # qa = RetrievalQA.from_chain_type(
    #     llm=OpenAI(),
    #     chain_type="stuff",
    #     retriever=vector_store.as_retriever()
    # )

    # # show user input
    # user_question = st.text_input("Ask a question about your PDF:")
    # if user_question:
    #     handle_userinput(user_question)
    #     st.write(f"Question: {user_question}")
    #     answer = qa.run(user_question)
    #     st.write(f"Answer: {answer}")

    load_dotenv()
    st.set_page_config(page_title="Ask Qdrant")
    st.header("Ask your remote database ðŸ’¬")
    st.write(css, unsafe_allow_html=True)

    if "conversation" not in st.session_state:
        st.session_state.conversation = None
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = None

    user_question = st.text_input("Ask a question to your vector database:")
    if user_question:
        handle_userinput(user_question)

        # st.subheader("Your documents")
        # pdf_docs = st.file_uploader(
        #     "Upload your PDFs here and click on 'Process'", accept_multiple_files=True)
        # if st.button("Process"):
        #     with st.spinner("Processing"):
                # get pdf text
                # raw_text = get_pdf_text(pdf_docs)

                # get the text chunks
                # text_chunks = get_text_chunks(raw_text)

      # create vector store
        vector_store = get_vector_store()

      # create conversation chain
        st.session_state.conversation = get_conversation_chain(vector_store)
        
if __name__ == '__main__':
    main()
